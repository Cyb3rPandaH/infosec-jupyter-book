{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Process Injection - CreatRemoteThread\n",
    "* **Author**: Jose Rodriguez (@Cyb3rPandah)\n",
    "* **Project**: Infosec Jupyter Book\n",
    "* **Public Organization**: [Open Threat Research](https://github.com/OTRF)\n",
    "* **License**: [Creative Commons Attribution-ShareAlike 4.0 International](https://creativecommons.org/licenses/by-sa/4.0/)\n",
    "* **Reference**: \n",
    "    * https://spark.apache.org/docs/latest/api/python/pyspark.sql.html\n",
    "    * https://docs.microsoft.com/en-us/windows/win32/procthread/process-security-and-access-rights"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating SQL view from Mordor Process Injection dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create Spark session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.sql import SparkSession\n",
    "\n",
    "spark = SparkSession \\\n",
    "    .builder \\\n",
    "    .appName(\"Spark_Data_Analysis\") \\\n",
    "    .config(\"spark.sql.caseSensitive\",\"True\") \\\n",
    "    .getOrCreate()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Expose the dataframe as a SQL view"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "processInjectionJson = 'datasets/empire_psinject_2020-08-07143205.json'\n",
    "\n",
    "processInjectionDf = spark.read.json(processInjectionJson)\n",
    "\n",
    "processInjectionDf.createOrReplaceTempView('processInjection')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Filtering & Summarizing data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get most frecuent Access Flags (Bitmask) of Processes accessing other Processes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Create dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This dataframe has 10 records!!\n",
      "+-------------+-----+\n",
      "|GrantedAccess|Count|\n",
      "+-------------+-----+\n",
      "|       0x1000|  463|\n",
      "|       0x3000|   83|\n",
      "|         0x40|    4|\n",
      "|     0x1fffff|    2|\n",
      "|       0x1400|    2|\n",
      "|       0x1410|    2|\n",
      "|       0x1478|    2|\n",
      "|     0x100000|    1|\n",
      "|     0x1f3fff|    1|\n",
      "|     0x101541|    1|\n",
      "+-------------+-----+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "processAccess = spark.sql(\n",
    "'''\n",
    "SELECT GrantedAccess, count(*) as Count\n",
    "FROM processInjection\n",
    "WHERE lower(Channel) LIKE '%sysmon%'\n",
    "    AND EventID = 10\n",
    "GROUP BY GrantedAccess\n",
    "ORDER BY Count DESC\n",
    "''')\n",
    "\n",
    "print('This dataframe has {} records!!'.format(processAccess.count()))\n",
    "processAccess.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Transforming data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create a Spark UDF to get the specific Access Rights related to every Bitmask"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Define a function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def getSpecificAccessRights(bitmask):\n",
    "    bitmask = int(bitmask,16)\n",
    "    specificAccessRights = {'PROCESS_CREATE_PROCESS' : 0x0080,\n",
    "            'PROCESS_CREATE_THREAD' : 0x0002,\n",
    "            'PROCESS_DUP_HANDLE' : 0x0040,\n",
    "            'PROCESS_QUERY_INFORMATION' : 0x0400,\n",
    "            'PROCESS_QUERY_LIMITED_INFORMATION' : 0x1000,\n",
    "            'PROCESS_SET_INFORMATION' : 0x0200,\n",
    "            'PROCESS_SET_QUOTA' : 0x0100,\n",
    "            'PROCESS_SUSPEND_RESUME' : 0x0800,\n",
    "            'PROCESS_TERMINATE' : 0x0001,\n",
    "            'PROCESS_VM_OPERATION' : 0x0008,\n",
    "            'PROCESS_VM_READ' : 0x0010,\n",
    "            'PROCESS_VM_WRITE' : 0x0020,\n",
    "            'SYNCHRONIZE' : 0x00100000,\n",
    "            'PROCESS_SET_LIMITED_INFORMATION' : 0x2000}\n",
    "    \n",
    "    rights = [ ]\n",
    "    \n",
    "    for key,value in specificAccessRights.items():\n",
    "        if value & bitmask != 0:\n",
    "            rights.append(key)\n",
    "    \n",
    "    return rights"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Register Spark UDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function __main__.getSpecificAccessRights(bitmask)>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pyspark.sql.types import *\n",
    "spark.udf.register(\"getAccessRights\", getSpecificAccessRights,ArrayType(StringType()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Apply the Spark UDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This dataframe has 10 records!!\n",
      "+-------------+--------------------------------------------------------------------------------+-----+\n",
      "|GrantedAccess|                                                                 RightsRequested|Count|\n",
      "+-------------+--------------------------------------------------------------------------------+-----+\n",
      "|       0x1000|                                             [PROCESS_QUERY_LIMITED_INFORMATION]|  463|\n",
      "|       0x3000|            [PROCESS_QUERY_LIMITED_INFORMATION, PROCESS_SET_LIMITED_INFORMATION]|   83|\n",
      "|         0x40|                                                            [PROCESS_DUP_HANDLE]|    4|\n",
      "|       0x1478|[PROCESS_DUP_HANDLE, PROCESS_QUERY_INFORMATION, PROCESS_QUERY_LIMITED_INFORMA...|    2|\n",
      "|       0x1400|                  [PROCESS_QUERY_INFORMATION, PROCESS_QUERY_LIMITED_INFORMATION]|    2|\n",
      "|       0x1410| [PROCESS_QUERY_INFORMATION, PROCESS_QUERY_LIMITED_INFORMATION, PROCESS_VM_READ]|    2|\n",
      "|     0x1fffff|[PROCESS_CREATE_PROCESS, PROCESS_CREATE_THREAD, PROCESS_DUP_HANDLE, PROCESS_Q...|    2|\n",
      "|     0x100000|                                                                   [SYNCHRONIZE]|    1|\n",
      "|     0x1f3fff|[PROCESS_CREATE_PROCESS, PROCESS_CREATE_THREAD, PROCESS_DUP_HANDLE, PROCESS_Q...|    1|\n",
      "|     0x101541|[PROCESS_DUP_HANDLE, PROCESS_QUERY_INFORMATION, PROCESS_QUERY_LIMITED_INFORMA...|    1|\n",
      "+-------------+--------------------------------------------------------------------------------+-----+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "processAccessRights = spark.sql(\n",
    "'''\n",
    "SELECT GrantedAccess, getAccessRights(GrantedAccess) as RightsRequested, count(*) as Count\n",
    "FROM processInjection\n",
    "WHERE lower(Channel) LIKE '%sysmon%'\n",
    "    AND EventID = 10\n",
    "GROUP BY GrantedAccess, RightsRequested\n",
    "ORDER BY Count DESC\n",
    "''')\n",
    "\n",
    "print('This dataframe has {} records!!'.format(processAccessRights.count()))\n",
    "processAccessRights.show(truncate = 80)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Filter events that requested \"Creation of Thread\" rights"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Filter **PROCESS_CREATE_THREAD (0x0002)**: Required to create a thread."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This dataframe has 3 records!!\n",
      "+-------------+---------------------------------------------------------+-------------------------------------+\n",
      "|GrantedAccess|                                              SourceImage|                          TargetImage|\n",
      "+-------------+---------------------------------------------------------+-------------------------------------+\n",
      "|     0x1f3fff|C:\\windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe|      C:\\windows\\system32\\notepad.exe|\n",
      "|     0x1fffff|                          C:\\windows\\system32\\svchost.exe|C:\\windows\\system32\\wbem\\wmiprvse.exe|\n",
      "|     0x1fffff|                            C:\\windows\\system32\\csrss.exe|C:\\windows\\system32\\wbem\\wmiprvse.exe|\n",
      "+-------------+---------------------------------------------------------+-------------------------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "createThread = spark.sql(\n",
    "'''\n",
    "SELECT GrantedAccess, SourceImage, TargetImage\n",
    "FROM processInjection\n",
    "WHERE lower(Channel) LIKE '%sysmon%'\n",
    "    AND EventID = 10\n",
    "    AND array_contains(getAccessRights(GrantedAccess),'PROCESS_CREATE_THREAD')\n",
    "''')\n",
    "\n",
    "print('This dataframe has {} records!!'.format(createThread.count()))\n",
    "createThread.show(truncate = 80)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Correlating data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Find Source Processes that used CreateRemoteThread APIs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This dataframe has 88 records!!\n",
      "+----------------------------------------+-------------------------------+-----------+\n",
      "|                             SourceImage|                    TargetImage|NewThreadId|\n",
      "+----------------------------------------+-------------------------------+-----------+\n",
      "|C:\\windows\\System32\\WindowsPowerShell...|C:\\windows\\system32\\notepad.exe|       3004|\n",
      "|C:\\windows\\System32\\WindowsPowerShell...|C:\\windows\\system32\\notepad.exe|       3756|\n",
      "|C:\\windows\\System32\\WindowsPowerShell...|C:\\windows\\system32\\notepad.exe|       2836|\n",
      "|C:\\windows\\System32\\WindowsPowerShell...|C:\\windows\\system32\\notepad.exe|       5764|\n",
      "|C:\\windows\\System32\\WindowsPowerShell...|C:\\windows\\system32\\notepad.exe|       8044|\n",
      "|C:\\windows\\System32\\WindowsPowerShell...|C:\\windows\\system32\\notepad.exe|       6168|\n",
      "|C:\\windows\\System32\\WindowsPowerShell...|C:\\windows\\system32\\notepad.exe|       8292|\n",
      "|C:\\windows\\System32\\WindowsPowerShell...|C:\\windows\\system32\\notepad.exe|       2976|\n",
      "|C:\\windows\\System32\\WindowsPowerShell...|C:\\windows\\system32\\notepad.exe|       1820|\n",
      "|C:\\windows\\System32\\WindowsPowerShell...|C:\\windows\\system32\\notepad.exe|       8252|\n",
      "|C:\\windows\\System32\\WindowsPowerShell...|C:\\windows\\system32\\notepad.exe|       4952|\n",
      "|C:\\windows\\System32\\WindowsPowerShell...|C:\\windows\\system32\\notepad.exe|       5436|\n",
      "|C:\\windows\\System32\\WindowsPowerShell...|C:\\windows\\system32\\notepad.exe|       9036|\n",
      "|C:\\windows\\System32\\WindowsPowerShell...|C:\\windows\\system32\\notepad.exe|       6556|\n",
      "|C:\\windows\\System32\\WindowsPowerShell...|C:\\windows\\system32\\notepad.exe|       8468|\n",
      "|C:\\windows\\System32\\WindowsPowerShell...|C:\\windows\\system32\\notepad.exe|       8592|\n",
      "|C:\\windows\\System32\\WindowsPowerShell...|C:\\windows\\system32\\notepad.exe|       6628|\n",
      "|C:\\windows\\System32\\WindowsPowerShell...|C:\\windows\\system32\\notepad.exe|       2272|\n",
      "|C:\\windows\\System32\\WindowsPowerShell...|C:\\windows\\system32\\notepad.exe|        904|\n",
      "|C:\\windows\\System32\\WindowsPowerShell...|C:\\windows\\system32\\notepad.exe|       8816|\n",
      "+----------------------------------------+-------------------------------+-----------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "networkConnection = spark.sql(\n",
    "'''\n",
    "SELECT b. SourceImage, b.TargetImage, a.NewThreadId\n",
    "FROM processInjection b\n",
    "INNER JOIN(\n",
    "    SELECT SourceProcessGuid, NewThreadId\n",
    "    FROM processInjection\n",
    "    WHERE lower(Channel) LIKE '%sysmon%'\n",
    "        AND EventID = 8\n",
    ")a\n",
    "ON b.SourceProcessGUID = a.SourceProcessGuid\n",
    "WHERE lower(Channel) LIKE '%sysmon%'\n",
    "    AND b.EventID = 10\n",
    "    AND array_contains(getAccessRights(GrantedAccess),'PROCESS_CREATE_THREAD')\n",
    "''')\n",
    "\n",
    "print('This dataframe has {} records!!'.format(networkConnection.count()))\n",
    "networkConnection.show(truncate = 40)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Find Target Processes that made Network Connections "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This dataframe has 16 records!!\n",
      "+-------------------------------+-----------+-------------+\n",
      "|                    TargetImage|   SourceIp|DestinationIp|\n",
      "+-------------------------------+-----------+-------------+\n",
      "|C:\\windows\\system32\\notepad.exe|172.18.39.5|   10.10.10.5|\n",
      "|C:\\windows\\system32\\notepad.exe|172.18.39.5|   10.10.10.5|\n",
      "|C:\\windows\\system32\\notepad.exe|172.18.39.5|   10.10.10.5|\n",
      "|C:\\windows\\system32\\notepad.exe|172.18.39.5|   10.10.10.5|\n",
      "|C:\\windows\\system32\\notepad.exe|172.18.39.5|   10.10.10.5|\n",
      "|C:\\windows\\system32\\notepad.exe|172.18.39.5|   10.10.10.5|\n",
      "|C:\\windows\\system32\\notepad.exe|172.18.39.5|   10.10.10.5|\n",
      "|C:\\windows\\system32\\notepad.exe|172.18.39.5|   10.10.10.5|\n",
      "|C:\\windows\\system32\\notepad.exe|172.18.39.5|   10.10.10.5|\n",
      "|C:\\windows\\system32\\notepad.exe|172.18.39.5|   10.10.10.5|\n",
      "|C:\\windows\\system32\\notepad.exe|172.18.39.5|   10.10.10.5|\n",
      "|C:\\windows\\system32\\notepad.exe|172.18.39.5|   10.10.10.5|\n",
      "|C:\\windows\\system32\\notepad.exe|172.18.39.5|   10.10.10.5|\n",
      "|C:\\windows\\system32\\notepad.exe|172.18.39.5|   10.10.10.5|\n",
      "|C:\\windows\\system32\\notepad.exe|172.18.39.5|   10.10.10.5|\n",
      "|C:\\windows\\system32\\notepad.exe|172.18.39.5|   10.10.10.5|\n",
      "+-------------------------------+-----------+-------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "networkConnection = spark.sql(\n",
    "'''\n",
    "SELECT b.TargetImage, a.SourceIp, a.DestinationIp\n",
    "FROM processInjection b\n",
    "INNER JOIN(\n",
    "    SELECT ProcessGuid, SourceIp, DestinationIp\n",
    "    FROM processInjection\n",
    "    WHERE lower(Channel) LIKE '%sysmon%'\n",
    "        AND EventID = 3\n",
    ")a\n",
    "ON b.TargetProcessGUID = a.ProcessGuid\n",
    "WHERE lower(Channel) LIKE '%sysmon%'\n",
    "    AND b.EventID = 10\n",
    "    AND array_contains(getAccessRights(GrantedAccess),'PROCESS_CREATE_THREAD')\n",
    "''')\n",
    "\n",
    "print('This dataframe has {} records!!'.format(networkConnection.count()))\n",
    "networkConnection.show(truncate = 40)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Thank you! I hope you enjoyed it!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "PySpark_Python3",
   "language": "python",
   "name": "pyspark3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}